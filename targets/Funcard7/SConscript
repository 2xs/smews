# Copyright or c or Copr. 2008, Geoffroy Cogniaux
# This software is a computer program whose purpose is to design an
# efficient Web server for very-constrained embedded system.
# 
# This software is governed by the CeCILL license under French law and
# abiding by the rules of distribution of free software.  You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
# 
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
# 
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
# 
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL license and that you accept its terms.

import os
import sys

Import('env binDir projectName elfName')

env.Replace(CC = 'avr-gcc')
env.Replace(AS = 'avr-as')
env.Replace(AR = 'avr-ar')
env.Replace(RANLIB = 'avr-ranlib')
env.Append(CCFLAGS = '-mmcu=at90s8515 -DDAY=0x`date +%d` -DMONTH=0x`date +%m` -DYEAR=0x`date +%y`')
#env.Append(CCFLAGS = '-mmcu=at90s8515 -D __AVR_AT90S8515__ -DDAY=0x`date +%d` -DMONTH=0x`date +%m` -DYEAR=0x`date +%y`')

env.Append(ASFLAGS = '-mmcu=at90s8515')
#env.Append(LINKFLAGS = '-mmcu=at90s8515 -D__AVR_AT90S8515__')
env.Append(LINKFLAGS = '-mmcu=at90s8515')
env.Append(CCFLAGS = '-mcall-prologues')


# Size optimizations
 # Saves 2 bytes
env.Append(CCFLAGS = '-fno-inline-small-functions -fno-inline-functions')

# This does not seem to save anything so disabled, kept in comments for future reference
# env.Append(CCFLAGS = '-fno-reorder-blocks')
# env.Append(CCFLAGS = '-fno-reorder-blocks-and-partition')
# env.Append(CCFLAGS = '-fno-reorder-functions')
# env.Append(CCFLAGS = '-fno-toplevel-reorder')

# Saves 12 bytes
env.Append(CCFLAGS = '-fno-move-loop-invariants')

# Saves 8 bytes
env.Append(CCFLAGS = '-fshort-enums')

# Saves around 25 to 30 bytes (changes CALL and JMP to RCALL and RJMP when possible)
env.Append(LINKFLAGS = '-Wl,--relax')


binaryName = projectName + '.bin'
#env.Command(binaryName, elfName, 'avr-objcopy -R .eeprom -O binary $SOURCE $TARGET')
env.Command(binaryName, elfName, 'avr-objcopy -j .text -j .data -O binary $SOURCE $TARGET')

eepromName = projectName + '.eep.bin'
env.Command(eepromName, elfName, 'avr-objcopy -j .eeprom  -O binary $SOURCE $TARGET')
